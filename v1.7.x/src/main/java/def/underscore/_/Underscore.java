package def.underscore._;
import def.js.Function;
@jsweet.lang.Interface
public abstract class Underscore<T> extends def.js.Object {
    native public T[] each(def.underscore._.ListIterator<T,Void> iterator, Object context);
    native public T[] each(def.underscore._.ObjectIterator<T,Void> iterator, Object context);
    native public T[] forEach(def.underscore._.ListIterator<T,Void> iterator, Object context);
    native public T[] forEach(def.underscore._.ObjectIterator<T,Void> iterator, Object context);
    native public <TResult> TResult[] map(def.underscore._.ListIterator<T,TResult> iterator, Object context);
    native public <TResult> TResult[] map(def.underscore._.ObjectIterator<T,TResult> iterator, Object context);
    native public <TResult> TResult[] collect(def.underscore._.ListIterator<T,TResult> iterator, Object context);
    native public <TResult> TResult[] collect(def.underscore._.ObjectIterator<T,TResult> iterator, Object context);
    native public <TResult> TResult reduce(def.underscore._.MemoIterator<T,TResult> iterator, TResult memo, Object context);
    native public <TResult> TResult inject(def.underscore._.MemoIterator<T,TResult> iterator, TResult memo, Object context);
    native public <TResult> TResult foldl(def.underscore._.MemoIterator<T,TResult> iterator, TResult memo, Object context);
    native public <TResult> TResult reduceRight(def.underscore._.MemoIterator<T,TResult> iterator, TResult memo, Object context);
    native public <TResult> TResult foldr(def.underscore._.MemoIterator<T,TResult> iterator, TResult memo, Object context);
    native public <T> T find(def.underscore._.ListIterator<T,Boolean> iterator, Object context);
    native public <T,U extends java.lang.Object> T find(U interator);
    native public <T> T find(String interator);
    native public <T> T detect(def.underscore._.ListIterator<T,Boolean> iterator, Object context);
    native public <T,U extends java.lang.Object> T detect(U interator);
    native public <T> T detect(String interator);
    native public T[] filter(def.underscore._.ListIterator<T,Boolean> iterator, Object context);
    native public T[] select(def.underscore._.ListIterator<T,Boolean> iterator, Object context);
    native public <U extends java.lang.Object> T[] where(U properties);
    native public <U extends java.lang.Object> T findWhere(U properties);
    native public T[] reject(def.underscore._.ListIterator<T,Boolean> iterator, Object context);
    native public Boolean all(def.underscore._.ListIterator<T,Boolean> iterator, Object context);
    native public Boolean every(def.underscore._.ListIterator<T,Boolean> iterator, Object context);
    native public Boolean any(def.underscore._.ListIterator<T,Boolean> iterator, Object context);
    native public Boolean some(def.underscore._.ListIterator<T,Boolean> iterator, Object context);
    native public Boolean contains(T value, double fromIndex);
    native public Boolean include(T value, double fromIndex);
    native public Boolean includes(T value, double fromIndex);
    native public Object invoke(String methodName, Object... args);
    native public Object[] pluck(String propertyName);
    native public double max();
    native public T max(ListIteratorTDouble<T> iterator, Object context);
    native public T max(ListIteratorTAny<T> iterator, Object context);
    native public double min();
    native public T min(ListIteratorTDouble<T> iterator, Object context);
    native public T min(ListIteratorTAny<T> iterator, Object context);
    native public T[] sortBy(def.underscore._.ListIterator<T,?> iterator, Object context);
    native public T[] sortBy(String iterator, Object context);
    native public def.underscore._.Dictionary<def.underscore._.List<T>> groupBy(def.underscore._.ListIterator<T,?> iterator, Object context);
    native public def.underscore._.Dictionary<T[]> groupBy(String iterator, Object context);
    native public def.underscore._.Dictionary<T> indexBy(def.underscore._.ListIterator<T,?> iterator, Object context);
    native public def.underscore._.Dictionary<T> indexBy(String iterator, Object context);
    native public def.underscore._.Dictionary<Double> countBy(def.underscore._.ListIterator<T,?> iterator, Object context);
    native public def.underscore._.Dictionary<Double> countBy(String iterator, Object context);
    native public T[] shuffle();
    native public <T> T[] sample(double n);
    native public <T> T sample();
    native public T[] toArray();
    native public double size();
    native public T first();
    native public T[] first(double n);
    native public T head();
    native public T[] head(double n);
    native public T take();
    native public T[] take(double n);
    native public T[] initial(double n);
    native public T last();
    native public T[] last(double n);
    native public T[] rest(double n);
    native public T[] tail(double n);
    native public T[] drop(double n);
    native public T[] compact();
    native public Object[] flatten(Boolean shallow);
    native public T[] without(@SuppressWarnings("unchecked") T... values);
    native public T[][] partition(def.underscore._.ListIterator<T,Boolean> iterator, Object context);
    native public T[] union(@SuppressWarnings("unchecked") def.underscore._.List<T>... arrays);
    native public T[] intersection(@SuppressWarnings("unchecked") def.underscore._.List<T>... arrays);
    native public T[] difference(@SuppressWarnings("unchecked") def.underscore._.List<T>... others);
    native public T[] uniq(Boolean isSorted, def.underscore._.ListIterator<T,?> iterator);
    native public <TSort> T[] uniq(def.underscore._.ListIterator<T,TSort> iterator, Object context);
    native public <TSort> T[] unique(Boolean isSorted, def.underscore._.ListIterator<T,TSort> iterator);
    native public <TSort> T[] unique(def.underscore._.ListIterator<T,TSort> iterator, Object context);
    native public Object[][] zip(Object[]... arrays);
    native public Object[][] unzip(Object[]... arrays);
    native public Object object(Object[]... keyValuePairs);
    native public Object object(Object values);
    native public double indexOf(T value, Boolean isSorted);
    native public double indexOf(T value, double startFrom);
    native public double lastIndexOf(T value, double from);
    native public <T> double findIndex(def.underscore._.List<T> array, def.underscore._.ListIterator<T,Boolean> predicate, Object context);
    native public <T> double findLastIndex(def.underscore._.List<T> array, def.underscore._.ListIterator<T,Boolean> predicate, Object context);
    native public double sortedIndex(T value, java.util.function.Function<T,Object> iterator, Object context);
    native public double[] range(double stop, double step);
    native public double[] range();
    native public Object[][] chunk();
    native public Function bind(Object object, Object... args);
    native public Object bindAll(String... methodNames);
    native public Function partial(Object... args);
    native public Function memoize(java.util.function.Function<Object,String> hashFn);
    native public void defer(Object... args);
    native public Object delay(double wait, Object... args);
    native public Object delay(Object... args);
    native public jsweet.util.union.Union<Function,def.underscore._.Cancelable> throttle(double wait, def.underscore._.ThrottleSettings options);
    native public jsweet.util.union.Union<Function,def.underscore._.Cancelable> debounce(double wait, Boolean immediate);
    native public Function once();
    native public Function restArgs(double starIndex);
    native public Function after(Function fn);
    native public Function before(Function fn);
    native public java.util.function.Supplier<Function> wrap(Function wrapper);
    native public Boolean negate();
    native public Function compose(Function... functions);
    native public String[] keys();
    native public String[] allKeys();
    native public T[] values();
    native public Object[][] pairs();
    native public Object invert();
    native public String[] functions();
    native public String[] methods();
    native public Object extend(Object... sources);
    native public Object findKey(def.underscore._.ObjectIterator<?,Boolean> predicate, Object context);
    native public Object pick(Object[] keys);
    native public Object pick(jsweet.util.function.TriFunction<Object,Object,Object,Object> fn);
    native public Object omit(String[] keys);
    native public Object omit(Function fn);
    native public Object defaults(Object... defaults);
    @jsweet.lang.Name("clone")
    native public T Clone();
    native public Object tap(java.util.function.Function<Object,Object> interceptor);
    native public Boolean has(String key);
    native public <TResult> def.underscore._.ListIterator<T,TResult> matches();
    native public <TResult> def.underscore._.ListIterator<T,TResult> matcher();
    native public java.util.function.Function<Object,Object> property();
    native public java.util.function.Function<String,Object> propertyOf();
    native public Boolean isEqual(Object other);
    native public Boolean isEmpty();
    native public Boolean isMatch();
    native public Boolean isElement();
    native public Boolean isArray();
    native public Boolean isSymbol();
    native public Boolean isObject();
    native public Boolean isArguments();
    native public Boolean isFunction();
    native public Boolean isError();
    native public Boolean isString();
    native public Boolean isNumber();
    native public Boolean isFinite();
    native public Boolean isBoolean();
    native public Boolean isDate();
    native public Boolean isRegExp();
    native public Boolean isNaN();
    native public Boolean isNull();
    native public Boolean isUndefined();
    native public Object identity();
    native public java.util.function.Supplier<T> constant();
    native public void noop();
    native public <TResult> TResult[] times(java.util.function.Function<Double,TResult> iterator, Object context);
    native public double random();
    native public double random(double max);
    native public void mixin();
    native public Function iteratee(Object context);
    native public String uniqueId();
    native public String escape();
    native public String unescape();
    native public Object result(String property, Object defaultValue);
    native public java.util.function.Function<Object,String> template(def.underscore._.TemplateSettings settings);
    native public _Chain<T> chain();
    native public <TResult> TResult value();
    native public T[] each(def.underscore._.ListIterator<T,Void> iterator);
    native public T[] each(def.underscore._.ObjectIterator<T,Void> iterator);
    native public T[] forEach(def.underscore._.ListIterator<T,Void> iterator);
    native public T[] forEach(def.underscore._.ObjectIterator<T,Void> iterator);
    native public <TResult> TResult[] map(def.underscore._.ListIterator<T,TResult> iterator);
    native public <TResult> TResult[] map(def.underscore._.ObjectIterator<T,TResult> iterator);
    native public <TResult> TResult[] collect(def.underscore._.ListIterator<T,TResult> iterator);
    native public <TResult> TResult[] collect(def.underscore._.ObjectIterator<T,TResult> iterator);
    native public <TResult> TResult reduce(def.underscore._.MemoIterator<T,TResult> iterator, TResult memo);
    native public <TResult> TResult reduce(def.underscore._.MemoIterator<T,TResult> iterator);
    native public <TResult> TResult inject(def.underscore._.MemoIterator<T,TResult> iterator, TResult memo);
    native public <TResult> TResult inject(def.underscore._.MemoIterator<T,TResult> iterator);
    native public <TResult> TResult foldl(def.underscore._.MemoIterator<T,TResult> iterator, TResult memo);
    native public <TResult> TResult foldl(def.underscore._.MemoIterator<T,TResult> iterator);
    native public <TResult> TResult reduceRight(def.underscore._.MemoIterator<T,TResult> iterator, TResult memo);
    native public <TResult> TResult reduceRight(def.underscore._.MemoIterator<T,TResult> iterator);
    native public <TResult> TResult foldr(def.underscore._.MemoIterator<T,TResult> iterator, TResult memo);
    native public <TResult> TResult foldr(def.underscore._.MemoIterator<T,TResult> iterator);
    native public <T> T find(def.underscore._.ListIterator<T,Boolean> iterator);
    native public <T> T detect(def.underscore._.ListIterator<T,Boolean> iterator);
    native public <T,U extends java.lang.Object> T detect();
    native public T[] filter(def.underscore._.ListIterator<T,Boolean> iterator);
    native public T[] select(def.underscore._.ListIterator<T,Boolean> iterator);
    native public T[] reject(def.underscore._.ListIterator<T,Boolean> iterator);
    native public Boolean all(def.underscore._.ListIterator<T,Boolean> iterator);
    native public Boolean all();
    native public Boolean every(def.underscore._.ListIterator<T,Boolean> iterator);
    native public Boolean every();
    native public Boolean any(def.underscore._.ListIterator<T,Boolean> iterator);
    native public Boolean any();
    native public Boolean some(def.underscore._.ListIterator<T,Boolean> iterator);
    native public Boolean some();
    native public Boolean contains(T value);
    native public Boolean include(T value);
    native public Boolean includes(T value);
    native public T max(def.underscore._.ListIterator<T,Double> iterator);
    native public T min(def.underscore._.ListIterator<T,Double> iterator);
    native public T[] sortBy(def.underscore._.ListIterator<T,?> iterator);
    native public T[] sortBy();
    native public T[] sortBy(String iterator);
    native public def.underscore._.Dictionary<def.underscore._.List<T>> groupBy(def.underscore._.ListIterator<T,?> iterator);
    native public def.underscore._.Dictionary<def.underscore._.List<T>> groupBy();
    native public def.underscore._.Dictionary<T[]> groupBy(String iterator);
    native public def.underscore._.Dictionary<T> indexBy(def.underscore._.ListIterator<T,?> iterator);
    native public def.underscore._.Dictionary<T> indexBy(String iterator);
    native public def.underscore._.Dictionary<Double> countBy(def.underscore._.ListIterator<T,?> iterator);
    native public def.underscore._.Dictionary<Double> countBy();
    native public def.underscore._.Dictionary<Double> countBy(String iterator);
    native public T[] initial();
    native public T[] rest();
    native public T[] tail();
    native public T[] drop();
    native public Object[] flatten();
    native public T[][] partition(def.underscore._.ListIterator<T,Boolean> iterator);
    native public T[] uniq(Boolean isSorted);
    native public T[] uniq();
    native public <TSort> T[] uniq(def.underscore._.ListIterator<T,TSort> iterator);
    native public <TSort> T[] unique(Boolean isSorted);
    native public <TSort> T[] unique();
    native public <TSort> T[] unique(def.underscore._.ListIterator<T,TSort> iterator);
    native public Object object();
    native public double indexOf(T value);
    native public double lastIndexOf(T value);
    native public <T> double findIndex(def.underscore._.List<T> array, def.underscore._.ListIterator<T,Boolean> predicate);
    native public <T> double findLastIndex(def.underscore._.List<T> array, def.underscore._.ListIterator<T,Boolean> predicate);
    native public double sortedIndex(T value, java.util.function.Function<T,Object> iterator);
    native public double sortedIndex(T value);
    native public double[] range(double stop);
    native public Function memoize();
    native public jsweet.util.union.Union<Function,def.underscore._.Cancelable> throttle(double wait);
    native public jsweet.util.union.Union<Function,def.underscore._.Cancelable> debounce(double wait);
    native public Function restArgs();
    native public Object findKey(def.underscore._.ObjectIterator<?,Boolean> predicate);
    native public Object create();
    native public <TResult> TResult[] times(java.util.function.Function<Double,TResult> iterator);
    native public Function iteratee();
    native public Object result(String property);
    native public java.util.function.Function<Object,String> template();
    native public <T> T find(def.underscore._.ObjectIterator<T,Boolean> iterator, Object context);
    native public <T> T detect(def.underscore._.ObjectIterator<T,Boolean> iterator, Object context);
    native public <T> double findIndex(def.underscore._.List<T> array, java.lang.Object predicate, Object context);
    native public <T> double findLastIndex(def.underscore._.List<T> array, java.lang.Object predicate, Object context);
    native public <T> T find(def.underscore._.ObjectIterator<T,Boolean> iterator);
    native public <T> T detect(def.underscore._.ObjectIterator<T,Boolean> iterator);
    native public <T> double findIndex(def.underscore._.List<T> array, java.lang.Object predicate);
    native public <T> double findLastIndex(def.underscore._.List<T> array, java.lang.Object predicate);
    native public <T> double findIndex(T[] array, def.underscore._.ListIterator<T,Boolean> predicate, Object context);
    native public <T> double findLastIndex(T[] array, def.underscore._.ListIterator<T,Boolean> predicate, Object context);
    native public <T> double findIndex(T[] array, def.underscore._.ListIterator<T,Boolean> predicate);
    native public <T> double findLastIndex(T[] array, def.underscore._.ListIterator<T,Boolean> predicate);
    native public <T> double findIndex(T[] array, java.lang.Object predicate, Object context);
    native public <T> double findLastIndex(T[] array, java.lang.Object predicate, Object context);
    native public <T> double findIndex(T[] array, java.lang.Object predicate);
    native public <T> double findLastIndex(T[] array, java.lang.Object predicate);
    /** This class was automatically generated for disambiguating erased method signatures. */
    @jsweet.lang.Erased
    public static class ListIteratorTDouble<T> extends def.js.Object {
        public ListIteratorTDouble(def.underscore._.ListIterator<T,Double> iterator){}
    }
    /** This class was automatically generated for disambiguating erased method signatures. */
    @jsweet.lang.Erased
    public static class ListIteratorTAny<T> extends def.js.Object {
        public ListIteratorTAny(def.underscore._.ListIterator<T,?> iterator){}
    }
}

